# Makefile of the mock generator for Google Mock

# Replace white spaces in "C:\Program Files"
COMMA:=,
EMPTY:=
SPACE:=$(EMPTY) $(EMPTY)

# Setup for your environment
# Install dir for Cygwin64 and MinGW-64
CYGWIN_GCC_INCLUDE_DIR=/usr/lib/gcc/x86_64-pc-cygwin/4.9.3/include
MINGW_DIR=C:\Program Files\mingw-w64\x86_64-4.9.2-posix-seh-rt_v3-rev1\mingw64
MINGW_GCC_INCLUDE_DIR=$(MINGW_DIR)\lib\gcc\x86_64-w64-mingw32\4.9.2\include

# clang needs g++ header files
ifeq ($(OS),Windows_NT)
# Cygwin
  ifneq (,$(findstring cygwin,$(shell gcc -dumpmachine)))
BUILD_ON_CYGWIN=yes
CLANG_CC1_ISYSTEM=$(addprefix -cxx-isystem,/usr/include /usr/include/w32api $(CYGWIN_GCC_INCLUDE_DIR) $(CYGWIN_GCC_INCLUDE_DIR)/c++ $(CYGWIN_GCC_INCLUDE_DIR)/c++/x86_64-pc-cygwin)
# MinGW
  else
BUILD_ON_MINGW=yes
ISYSTEM_DIR = $(subst $(SPACE),$(COMMA),$(MINGW_DIR))\x86_64-w64-mingw32\include
GCC_INCLUDE_DIR = $(subst $(SPACE),$(COMMA),$(MINGW_GCC_INCLUDE_DIR))
# quote C:\Program Files\... paths to pass to cmd
CLANG_CC1_ISYSTEM = $(subst $(COMMA),$(SPACE),$(addprefix -cxx-isystem ",$(addsuffix ",$(ISYSTEM_DIR) $(ISYSTEM_DIR)\c++ $(ISYSTEM_DIR)\c++\x86_64-w64-mingw32 $(GCC_INCLUDE_DIR))))
  endif
endif

# Install dir for Google Test and Google Mock
GTEST_GMOCK_TOP_DIR=$(HOME)/googletest
GTEST_TOP_DIR=$(GTEST_GMOCK_TOP_DIR)/googletest
GMOCK_TOP_DIR=$(GTEST_GMOCK_TOP_DIR)/googlemock

# Treat as system headers not to make dependency
GTEST_GMOCK_INCLUDE=$(addprefix -isystem, $(GTEST_TOP_DIR)/include $(GTEST_TOP_DIR) $(GMOCK_TOP_DIR)/include $(GMOCK_TOP_DIR))
GTEST_SOURCE=$(GTEST_TOP_DIR)/src/gtest-all.cc
GMOCK_SOURCE=$(GMOCK_TOP_DIR)/src/gmock-all.cc
GTEST_OBJ=$(patsubst %.cc, %.o, $(notdir $(GTEST_SOURCE)))
GMOCK_OBJ=$(patsubst %.cc, %.o, $(notdir $(GMOCK_SOURCE)))

# Local dirs
TESTED_HEADER_DIR=tested_include
UTILITY_HEADER_DIR=utility
TESTER_HEADER_DIR=tester_include
TESTED_SRC_DIR=tested_src
TESTER_SRC_DIR=tester_src
GENERATED_FILE_DIR=./generated

OBJ_DIR=obj
TARGET_DIR=bin
SCRIPT_DIR=script
VPATH=$(TESTED_SRC_DIR) $(TESTER_SRC_DIR) $(dir $(GTEST_SOURCE) $(GMOCK_SOURCE))

# Sources and scripts
GENERATOR_SCRIPT=$(SCRIPT_DIR)/mockgen.rb
GENERATOR_SCRIPT_TEST=$(SCRIPT_DIR)/mockgenTest.rb
PREPROCESS_SCRIPT_TEST=$(SCRIPT_DIR)/mockgenReplaceTest.rb

GENERATOR_SCRIPT_FILES=$(wildcard $(SCRIPT_DIR)/*.rb)
ORIGINAL_HEADER_BASENAME=mockgenSample1
ORIGINAL_HEADER=$(TESTED_HEADER_DIR)/$(ORIGINAL_HEADER_BASENAME).hpp
TESTER_SOURCES=$(notdir $(wildcard $(TESTER_SRC_DIR)/*.cpp))
TESTED_SOURCES=$(notdir $(wildcard $(TESTED_SRC_DIR)/*.cpp))

# Target and intermediate files
TARGET_EXE=$(TARGET_DIR)/mockgenSample

GENERATOR_MODE ?= mock
GENERATOR_FILTERED_OUT_CLASSNAME=NotMocked
GENERATOR_FILTER ?= $(addprefix -filter ,"[A-Z]") $(addprefix -filterout , $(GENERATOR_FILTERED_OUT_CLASSNAME))
GENERATOR_SOURCES ?= $(addprefix -source , $(wildcard $(TESTER_SRC_DIR)/*.cpp))
ORIGINAL_HEADER_FILENAME=$(notdir $(ORIGINAL_HEADER))
CONVERTED_HEADER=$(GENERATED_FILE_DIR)/converted_$(ORIGINAL_HEADER_FILENAME)
GENERATED_MOCK_HEADER=$(GENERATED_FILE_DIR)/mock_$(ORIGINAL_HEADER_FILENAME)
GENERATED_TYPE_SWAPPER_HEADER=$(GENERATED_FILE_DIR)/typeSwapper_$(ORIGINAL_HEADER_FILENAME)
GENERATED_VAR_SWAPPER_HEADER=$(GENERATED_FILE_DIR)/varSwapper_$(ORIGINAL_HEADER_FILENAME)
GENERATED_DECL_HEADER=$(GENERATED_FILE_DIR)/varDecl_$(ORIGINAL_HEADER_FILENAME)
GENERATED_DEF_SOURCE=$(GENERATED_FILE_DIR)/varDef_$(basename $(ORIGINAL_HEADER_FILENAME)).cpp
GENERATED_FILES=$(CONVERTED_HEADER) $(GENERATED_MOCK_HEADER) $(GENERATED_TYPE_SWAPPER_HEADER)
GENERATED_FILES+=$(GENERATED_VAR_SWAPPER_HEADER) $(GENERATED_DECL_HEADER) $(GENERATED_DEF_SOURCE)

GENERATOR_SPLIT_EACH_CLASS = -split 1
GENERATOR_SPLIT_BULK_CLASSES = -split 3

# Link error log to filter mock
LINK_ERROR_LOG=$(GENERATED_FILE_DIR)/link_error.log

TESTER_OBJS=$(addprefix $(OBJ_DIR)/, $(patsubst %.cpp, %.o, $(TESTER_SOURCES)))
TESTED_OBJS=$(addprefix $(OBJ_DIR)/, $(patsubst %.cpp, %.o, $(TESTED_SOURCES)))
TESTER_DEPENDS=$(patsubst %.o, %.d, $(TESTER_OBJS))
TESTED_DEPENDS=$(patsubst %.o, %.d, $(TESTED_OBJS))

# Source files after preprocessed
PROCESSED_CPP_SUFFIX:=.processed
TESTER_PROCESSED_CPPS=$(addprefix $(OBJ_DIR)/, $(patsubst %.cpp, %$(PROCESSED_CPP_SUFFIX), $(TESTER_SOURCES)))
TESTED_PROCESSED_CPPS=$(addprefix $(OBJ_DIR)/, $(patsubst %.cpp, %$(PROCESSED_CPP_SUFFIX), $(TESTED_SOURCES)))
PREPROCESS_SCRIPT_TEST_FILES = $(addprefix $(OBJ_DIR)/, $(addsuffix $(PROCESSED_CPP_SUFFIX), mockgenSampleTestBody mockgenSampleUser))

ALL_OBJS=$(TESTER_OBJS) $(TESTED_OBJS) $(addprefix $(OBJ_DIR)/, $(GTEST_OBJ) $(GMOCK_OBJ))
DEPENDS=$(TESTER_DEPENDS) $(TESTED_DEPENDS)
PROCESSED_CPPS=$(TESTER_PROCESSED_CPPS) $(TESTED_PROCESSED_CPPS)
TARGETS=$(TARGET_EXE)

# Tools
CLANG=clang++
CXX?=g++
LD=g++
RUBY?=ruby
ECHO?=echo
LS?=ls
GREP?=grep
WC?=wc

# Console output color
ECHO_START_FG="\e[94m
ECHO_END_FG=\e[0m"
ECHO_START_BG="\e[104m
ECHO_END_BG=\e[0m"

# Compile options
# C++98, 11 or 14
CPP_STD_OPT=-std=gnu++11
ifeq (,$(filter clang%, $(CXX)))
CLANG_OPT=
else
CLANG_OPT=-fno-exceptions
endif
# Common flags between clang++ and g++, tested, tested sources
CPP_COMMON_FLAGS=$(CPP_STD_OPT)
# To test ignoring attributes, enable these options
#CPP_COMMON_FLAGS+=-DTESTING_ATTRIBUTES -Wno-attributes

# LLVM 3.8.0 and up pre-built binaries for Windows are distributed
# with their default target set to x86_64-pc-windows-msvc
CLANG_TARGET=x86_64-pc-windows-gnu
ifeq ($(BUILD_ON_MINGW),yes)
ifneq (,$(findstring clang,$(CXX)))
CLANG_TARGET_CXX=-target $(CLANG_TARGET)
endif
CLANG_TARGET_CC1=-triple $(CLANG_TARGET)
endif

# Compilation for gtest-filepath.cc with clang++ on Cygwin
# causes errors because it cannot find _POSIX_PATH_MAX.
# Force to include limits.h which contains a definition of _POSIX_PATH_MAX.
ifneq (,$(BUILD_ON_CYGWIN))
ifneq (,$(filter clang%, $(CXX)))
INCLUDES_CLANG_GTEST = -include /usr/include/limits.h
endif
endif

# Flags for g++/clang++
INCLUDES= $(addprefix -I, $(TESTED_HEADER_DIR) $(GENERATED_FILE_DIR)) $(GTEST_GMOCK_INCLUDE)
CXXFLAGS=$(CLANG_TARGET_CXX) -g -Wall -O0 $(CPP_COMMON_FLAGS) $(CLANG_OPT) $(INCLUDES)
CXXFLAGS_TESTED=
CXXFLAGS_TESTER=$(addprefix -I, $(UTILITY_HEADER_DIR) $(TESTER_HEADER_DIR))
CXXFLAGS_GTEST_GMOCK=$(CLANG_TARGET_CXX) -Wall -O2 $(CPP_COMMON_FLAGS) $(CLANG_OPT) $(GTEST_GMOCK_INCLUDE)

# Flags for clang++ -cc1
# -cxx-isystem must be at its tail to pass to the script
CLANG_FLAGS=-cc1 -ast-print -fblocks -fgnu-keywords -x c++ $(CLANG_TARGET_CC1) $(CPP_COMMON_FLAGS) $(CLANG_CC1_ISYSTEM)

LIBPATH=
LDFLAGS=
LIBS=-lstdc++

ALL_UPDATED_VARIABLES= \
	CYGWIN_GCC_INCLUDE_DIR MINGW_DIR MINGW_GCC_INCLUDE_DIR \
	BUILD_ON_CYGWIN BUILD_ON_MINGW \
	ISYSTEM_DIR GCC_INCLUDE_DIR CLANG_CC1_ISYSTEM \
	GTEST_GMOCK_TOP_DIR GTEST_TOP_DIR GMOCK_TOP_DIR \
	GTEST_GMOCK_INCLUDE GTEST_SOURCE GMOCK_SOURCE GTEST_OBJ GMOCK_OBJ \
	TESTED_HEADER_DIR UTILITY_HEADER_DIR TESTER_HEADER_DIR TESTED_SRC_DIR TESTER_SRC_DIR GENERATED_FILE_DIR \
	OBJ_DIR TARGET_DIR SCRIPT_DIR VPATH \
	GENERATOR_SCRIPT GENERATOR_SCRIPT_TEST PREPROCESS_SCRIPT_TEST \
	GENERATOR_SCRIPT_FILES ORIGINAL_HEADER_BASENAME ORIGINAL_HEADER TESTER_SOURCES TESTED_SOURCES \
	TARGET_EXE GENERATOR_MODE GENERATOR_FILTERED_OUT_CLASSNAME \
	GENERATOR_FILTER GENERATOR_SOURCES CONVERTED_HEADER GENERATED_MOCK_HEADER \
	GENERATED_TYPE_SWAPPER_HEADER GENERATED_VAR_SWAPPER_HEADER GENERATED_SWAPPER_HEADER \
	GENERATED_DECL_HEADER GENERATED_DEF_SOURCE GENERATED_FILES \
	LINK_ERROR_LOG TESTER_OBJS TESTED_OBJS TESTER_DEPENDS TESTED_DEPENDS \
	PROCESSED_CPP_SUFFIX TESTER_PROCESSED_CPPS TESTED_PROCESSED_CPPS PREPROCESS_SCRIPT_TEST_FILES \
	ALL_OBJS DEPENDS PROCESSED_CPPS TARGETS \
	CLANG CXX LD RUBY ECHO LS GREP WC \
	ECHO_START_FG ECHO_END_FG ECHO_START_BG ECHO_END_BG \
	CPP_STD_OPT CLANG_OPT CPP_COMMON_FLAGS \
	CLANG_TARGET CLANG_TARGET_CXX CLANG_TARGET_CC1 \
	INCLUDES_CLANG_GTEST INCLUDES CXXFLAGS CXXFLAGS_TESTED CXXFLAGS_TESTER CXXFLAGS_GTEST_GMOCK \
	CLANG_FLAGS \
	LIBPATH LDFLAGS LIBS


#Local Variables:
#mode: Makefile
#coding: utf-8-dos
#End:
